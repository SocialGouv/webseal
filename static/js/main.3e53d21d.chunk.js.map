{"version":3,"sources":["Form.js","App.js","index.js"],"names":["isValidKey","key","isValid","pki","certificateFromPem","e","console","log","RadioChoice","React","forwardRef","ref","name","value","props","Check","inline","id","label","type","Form","onSubmit","useForm","mode","defaultValues","pemKey","namespace","scope","register","handleSubmit","getValues","formState","setValue","trigger","validKey","isDirty","data","Row","Col","Label","Group","Control","as","style","marginTop","fontSize","fontFamily","rows","onChange","target","required","placeholder","defaultValue","xs","sm","column","Button","disabled","block","variant","Intro","Jumbotron","padding","CodeArea","border","width","height","Copier","text","useState","copied","setCopied","onCopy","setTimeout","marginLeft","cursor","transition","color","title","size","Editor","encrypted","setEncrypted","yamlResult","setYamlResult","Container","Card","Body","encryptValue","then","a","getSealedSecret","values","VALUE","sealedSecret","newYaml","yaml","dump","catch","Title","App","className","rootElement","document","getElementById","ReactDOM","render","href"],"mappings":"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","file":"static/js/main.3e53d21d.chunk.js","sourcesContent":["import React from \"react\";\nimport { pki } from \"node-forge\";\n\nimport { Row, Col, Form as BsForm, Button } from \"react-bootstrap\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nconst isValidKey = (key) => {\n  let isValid = false;\n  try {\n    pki.certificateFromPem(key);\n    isValid = true;\n  } catch (e) {\n    console.log(\"e\", e);\n  }\n  return isValid;\n};\n\nconst RadioChoice = React.forwardRef(({ name, value, ...props }, ref) => (\n  <BsForm.Check\n    inline\n    ref={ref}\n    name={name}\n    id={`${name}-${value}`}\n    label={value}\n    type=\"radio\"\n    value={value}\n    {...props}\n  />\n));\n\nconst certificatePlaceholder = `-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----`;\n\nconst certificateSample = ``;\n\nexport const Form = ({ onSubmit }) => {\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    setValue,\n    trigger,\n  } = useForm({\n    mode: \"all\",\n    defaultValues: {\n      pemKey: certificateSample,\n      value: \"\",\n      namespace: \"\",\n      name: \"\",\n      scope: \"cluster\",\n    },\n  });\n  const _onSubmit = (data) => {\n    //console.log(\"onSubmit\", data);\n    onSubmit(data);\n  };\n  const scope = getValues(\"scope\");\n  const pemKey = getValues(\"pemKey\");\n  const validKey = formState.isDirty\n    ? isValidKey(pemKey)\n    : isValidKey(certificateSample);\n  return (\n    <BsForm onSubmit={handleSubmit(_onSubmit)}>\n      <Row>\n        <Col>\n          <BsForm.Label>\n            Server public certificate (PEM key) :{\" \"}\n            {(!validKey && \"‚ùå Provided key is invalid\") || \"\"}\n          </BsForm.Label>\n          <BsForm.Group>\n            <BsForm.Control\n              as=\"textarea\"\n              name=\"pemKey\"\n              style={{\n                marginTop: 10,\n                fontSize: \"0.8rem\",\n                fontFamily: \"Courier\",\n              }}\n              rows={8}\n              onChange={(e) => {\n                setValue(\"pemKey\", e.target.value);\n                trigger();\n              }}\n              ref={register({ required: true })}\n              placeholder={certificatePlaceholder}\n              defaultValue={certificateSample}\n            />\n          </BsForm.Group>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={12} sm={3}>\n          <BsForm.Label>Scope :</BsForm.Label>\n        </Col>\n        <Col sm={9}>\n          <RadioChoice\n            name=\"scope\"\n            value=\"cluster\"\n            ref={register}\n            onChange={(e) => {\n              setValue(\"scope\", e.target.value);\n              trigger();\n            }}\n          />\n          <RadioChoice\n            name=\"scope\"\n            value=\"namespace\"\n            ref={register}\n            onChange={(e) => {\n              setValue(\"scope\", e.target.value);\n              trigger();\n            }}\n          />\n          <RadioChoice\n            name=\"scope\"\n            value=\"strict\"\n            ref={register}\n            onChange={(e) => {\n              setValue(\"scope\", e.target.value);\n              trigger();\n            }}\n          />\n        </Col>\n      </Row>\n      {(scope === \"namespace\" || scope === \"strict\") && (\n        <BsForm.Group as={Row}>\n          <BsForm.Label column>Namespace :</BsForm.Label>\n          <Col sm=\"9\">\n            <BsForm.Control\n              name=\"namespace\"\n              ref={register({ required: true })}\n              required\n              type=\"text\"\n              placeholder=\"Namespace\"\n            />\n          </Col>\n        </BsForm.Group>\n      )}\n      {scope === \"strict\" && (\n        <BsForm.Group as={Row}>\n          <BsForm.Label column>Secret name :</BsForm.Label>\n          <Col sm=\"9\">\n            <BsForm.Control\n              name=\"name\"\n              ref={register({ required: true })}\n              type=\"text\"\n              placeholder=\"Secret name\"\n            />\n          </Col>\n        </BsForm.Group>\n      )}\n      <BsForm.Group>\n        <BsForm.Control\n          as=\"textarea\"\n          name=\"value\"\n          onChange={(e) => {\n            setValue(\"value\", e.target.value);\n            trigger();\n          }}\n          style={{ marginTop: 10 }}\n          rows={4}\n          ref={register({ required: true })}\n          placeholder=\"Value to encrypt\"\n        />\n      </BsForm.Group>\n      <Button\n        disabled={!formState.isDirty || !formState.isValid}\n        block\n        variant=\"primary\"\n        type=\"submit\"\n      >\n        Encrypt\n      </Button>\n    </BsForm>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Card, Jumbotron, Container, Row, Col } from \"react-bootstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { Clipboard } from \"react-feather\";\nimport yaml from \"js-yaml\";\nimport { encryptValue, getSealedSecret } from \"@socialgouv/aes-gcm-rsa-oaep\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { Form } from \"./Form\";\n\nconst Intro = () => (\n  <Jumbotron style={{ padding: \"2rem 1rem\" }}>\n    <h1>WebSeal</h1>\n    <p>Client-side sealed-secrets generation</p>\n  </Jumbotron>\n);\n\nconst CodeArea = (props) => (\n  <textarea\n    {...props}\n    style={{\n      fontSize: \"0.8rem\",\n      fontFamily: \"Courier\",\n      border: \"1px solid #ccc\",\n      width: \"100%\",\n      padding: 5,\n      height: 400,\n      ...(props.style || {}),\n    }}\n  ></textarea>\n);\n\nconst Copier = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n  return (\n    <CopyToClipboard\n      text={text}\n      onCopy={() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      }}\n    >\n      <Clipboard\n        style={{\n          marginLeft: 10,\n          cursor: \"pointer\",\n          transition: \"all 0.2s ease-in\",\n        }}\n        color={copied ? \"green\" : \"black\"}\n        title=\"Copy\"\n        size={16}\n      />\n    </CopyToClipboard>\n  );\n};\n\nconst Editor = () => {\n  const [encrypted, setEncrypted] = useState(null);\n  const [yamlResult, setYamlResult] = useState(null);\n  const onSubmit = (data) => {\n    console.log(\"onSubmit2\", data);\n    setEncrypted(\"\");\n    setYamlResult(\"\");\n    encryptValue(data)\n      .then(async (value) => {\n        setEncrypted(value);\n        const sealedSecret = await getSealedSecret({\n          pemKey: data.pemKey,\n          namespace: data.namespace,\n          name: data.name,\n          scope: data.scope,\n          values: {\n            VALUE: data.value,\n          },\n        });\n\n        const newYaml = yaml.dump(sealedSecret);\n\n        setYamlResult(newYaml);\n      })\n      .catch(console.log);\n  };\n  return (\n    <Container>\n      <Intro />\n      <Row>\n        <Col xs={12}>\n          <Card>\n            <Card.Body>\n              <Form onSubmit={onSubmit} />\n            </Card.Body>\n          </Card>\n          {encrypted && (\n            <>\n              <Card style={{ marginTop: 10 }}>\n                <Card.Body>\n                  <Card.Title>\n                    Encrypted\n                    <Copier text={encrypted} />\n                  </Card.Title>\n                  <CodeArea defaultValue={encrypted} style={{ height: 200 }} />\n                </Card.Body>\n              </Card>\n              <Card style={{ marginTop: 10 }}>\n                <Card.Body>\n                  <Card.Title>\n                    SealedSecret <Copier text={yamlResult} />\n                  </Card.Title>\n                  <CodeArea defaultValue={yamlResult} />\n                </Card.Body>\n              </Card>\n            </>\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GitHubForkRibbon from \"react-github-fork-ribbon\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n    <GitHubForkRibbon\n      color=\"green\"\n      target=\"_blank\"\n      href=\"https://github.com/SocialGouv/webseal\"\n    >\n      Fork me on GitHub\n    </GitHubForkRibbon>\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}