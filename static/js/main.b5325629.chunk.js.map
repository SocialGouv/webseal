{"version":3,"sources":["isValidKey.js","Form.js","useHashParams.js","Protip.js","App.js","index.js"],"names":["isValidKey","key","isValid","pki","certificateFromPem","e","console","log","RadioChoice","React","forwardRef","ref","name","value","props","Check","inline","id","label","type","keepValidParamKeys","keyValidator","includes","object","Object","keys","filter","reduce","acc","Form","onSubmit","initialFormData","urlParams","parse","window","location","hash","useState","innerData","setInnerData","useCallback","data","history","replaceState","title","document","href","split","stringify","useHashParams","hashParamsData","setHashParamsData","hashParams","defaultValues","useForm","mode","register","handleSubmit","watch","setValue","trigger","getValues","_onSubmit","formState","pemKey","validKey","useEffect","subscription","values","unsubscribe","Card","Body","Row","Col","Label","Group","Control","as","style","marginTop","fontSize","fontFamily","rows","required","placeholder","xs","marginRight","onChange","target","column","tips","description","Protip","map","tip","Intro","Jumbotron","marginBottom","padding","CodeArea","border","width","height","Copier","text","copied","setCopied","onCopy","setTimeout","marginLeft","cursor","transition","color","size","Editor","cluster","namespace","formData","setFormData","encrypted","setEncrypted","yamlResult","setYamlResult","a","match","forEach","row","matches","VALUE","getSealedSecret","scope","sealedSecret","message","length","spec","encryptedData","yaml","dump","noRefs","lineWidth","Container","Title","defaultValue","App","className","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b5325629.chunk.js","sourcesContent":["import { pki } from \"node-forge\";\n\nexport const isValidKey = (key) => {\n  let isValid = false;\n  try {\n    pki.certificateFromPem(key);\n    isValid = true;\n  } catch (e) {\n    console.log(\"e\", e);\n  }\n  return isValid;\n};\n","import React from \"react\";\nimport { pki } from \"node-forge\";\n\nimport { Row, Col, Form as BsForm, Card } from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { useHashParams } from \"./useHashParams\";\nimport { isValidKey } from \"./isValidKey\";\n\nconst RadioChoice = React.forwardRef(({ name, value, ...props }, ref) => (\n  <BsForm.Check\n    inline\n    ref={ref}\n    name={name}\n    id={`${name}-${value}`}\n    label={value}\n    type=\"radio\"\n    value={value}\n    {...props}\n  />\n));\n\nconst isValidParamsKey = (key) =>\n  [\"namespace\", \"scope\", \"cluster\", \"name\", \"pemKey\"].includes(key);\n\nconst removeInvalidKeys = (keyValidator) => (object) =>\n  Object.keys(object)\n    .filter(keyValidator)\n    .reduce(\n      (acc, key) => ({\n        ...acc,\n        [key]: object[key],\n      }),\n      {}\n    );\n\nconst keepValidParamKeys = removeInvalidKeys(isValidParamsKey);\n\nconst certificatePlaceholder = `-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----`;\n\nexport const Form = ({ onSubmit, initialFormData }) => {\n  const [hashParamsData, setHashParamsData] = useHashParams();\n\n  const hashParams = keepValidParamKeys(hashParamsData);\n\n  const defaultValues = {\n    ...initialFormData,\n    ...hashParams,\n  };\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    trigger,\n    getValues,\n    formState,\n  } = useForm({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  const _onSubmit = (data) => {\n    setHashParamsData(keepValidParamKeys(data));\n    onSubmit(data);\n  };\n\n  //const cluster = watch(\"cluster\");\n  //const scope = watch(\"scope\");\n  const value = watch(\"value\");\n  const pemKey = watch(\"pemKey\");\n\n  const validKey = isValidKey(pemKey);\n\n  React.useEffect(() => {\n    const subscription = watch(\n      (\"value\",\n      ({ name, type }) => {\n        const values = getValues();\n        //console.log(\"value\", values, values);\n        // if (isValidKey(values.pemKey)) {\n        _onSubmit(values);\n        // }\n      })\n    );\n    return () => subscription.unsubscribe && subscription.unsubscribe();\n  }, [watch]);\n\n  return (\n    <BsForm onSubmit={handleSubmit(_onSubmit)}>\n      <Card>\n        <Card.Body>\n          <Row>\n            <Col>\n              <BsForm.Label>\n                Server public certificate (PEM key) :{\" \"}\n                {(!validKey && \"‚ùå Provided key is invalid\") || \"\"}\n              </BsForm.Label>\n              <BsForm.Group>\n                <BsForm.Control\n                  as=\"textarea\"\n                  name=\"pemKey\"\n                  style={{\n                    marginTop: 10,\n                    fontSize: \"0.8rem\",\n                    fontFamily: \"Courier\",\n                  }}\n                  rows={8}\n                  {...register(\"pemKey\", { required: true })}\n                  placeholder={certificatePlaceholder}\n                />\n              </BsForm.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={2}>\n              <BsForm.Label style={{ marginRight: 10 }}>Scope :</BsForm.Label>\n            </Col>\n            <Col xs={10}>\n              <RadioChoice\n                name=\"scope\"\n                value=\"cluster\"\n                {...register(\"scope\")}\n                onChange={(e) => {\n                  setValue(\"scope\", e.target.value);\n                  trigger();\n                }}\n              />\n              <RadioChoice\n                name=\"scope\"\n                value=\"namespace\"\n                {...register(\"scope\")}\n                onChange={(e) => {\n                  setValue(\"scope\", e.target.value);\n                  trigger();\n                }}\n              />\n              <RadioChoice\n                name=\"scope\"\n                value=\"strict\"\n                {...register(\"scope\")}\n                onChange={(e) => {\n                  setValue(\"scope\", e.target.value);\n                  trigger();\n                }}\n              />\n            </Col>\n          </Row>\n          <BsForm.Group as={Row}>\n            <BsForm.Label column>Namespace :</BsForm.Label>\n            <Col xs=\"10\">\n              <BsForm.Control\n                name=\"namespace\"\n                {...register(\"namespace\", { required: true })}\n                required\n                type=\"text\"\n                placeholder=\"Namespace\"\n              />\n            </Col>\n          </BsForm.Group>\n          <BsForm.Group as={Row}>\n            <BsForm.Label column>Secret name :</BsForm.Label>\n            <Col xs=\"10\">\n              <BsForm.Control\n                name=\"name\"\n                {...register(\"name\", { required: true })}\n                type=\"text\"\n                placeholder=\"Secret name\"\n              />\n            </Col>\n          </BsForm.Group>\n        </Card.Body>\n      </Card>\n      <Card style={{ marginTop: 10 }}>\n        <Card.Body>\n          <BsForm.Group>\n            <h4>Values to encrypt :</h4>\n            <BsForm.Control\n              as=\"textarea\"\n              name=\"value\"\n              id=\"value\"\n              style={{ marginTop: 10 }}\n              rows={4}\n              {...register(\"value\", { required: true, value })}\n              placeholder={`MY_TOKEN=SomeSuperSecretToken\nMY_PASSWORD=SomeSuperSecretPassword`}\n            />\n          </BsForm.Group>\n        </Card.Body>\n      </Card>\n    </BsForm>\n  );\n};\n","import { parse, stringify } from \"query-string\";\nimport { useCallback, useState } from \"react\";\n\nexport const useHashParams = () => {\n  const urlParams = parse(window.location.hash);\n\n  const [innerData, setInnerData] = useState(urlParams);\n\n  const setData = useCallback(\n    (data) => {\n      // dont reload page\n      window.history.replaceState(\n        {},\n        window.title,\n        document.location.href.split(\"#\")[0] + \"#\" + stringify(data)\n      );\n      setInnerData(data);\n    },\n    [setInnerData]\n  );\n\n  return [innerData, setData];\n};\n","import React from \"react\";\n\nimport { Card } from \"react-bootstrap\";\n\nconst tips = [\n  {\n    title: \"‚öìÔ∏è Use the URL luke\",\n    description:\n      \"We provide a safe and friendly URL to create new secrets with the same parameters\",\n  },\n  {\n    title: \"üîê Use a strict scope\",\n    description:\n      \"Using a strict scope is recommended to increase your sealed-secret robustness\",\n  },\n  {\n    title: \"üì¶ A sealed-secret produce a readable Kubernetes Secret\",\n    description:\n      \"Once unencrypted in the destination namespace, your sealed-secret creates a standard kubernetes Secret.\",\n  },\n  {\n    title: \"üë®‚Äç‚öïÔ∏è kubectl get events --field-selector involvedObject.kind=\\\"SealedSecret\\\"\",\n    description: \"If decryption fails, kubectl events will tell you\"\n  }\n];\n\nexport const Protip = () => {\n  return tips.map((tip) => (\n    <Card style={{ marginTop: 10 }}>\n      <Card.Body>\n        <h5>{tip.title}</h5>\n        {tip.description}\n      </Card.Body>\n    </Card>\n  ));\n};\n","import React, { useState } from \"react\";\nimport { Card, Jumbotron, Container, Row, Col } from \"react-bootstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { Clipboard } from \"react-feather\";\nimport yaml from \"js-yaml\";\nimport { encryptValue, getSealedSecret } from \"@socialgouv/aes-gcm-rsa-oaep\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { isValidKey } from \"./isValidKey\";\nimport { Form } from \"./Form\";\nimport { Protip } from \"./Protip\";\n\nconst Intro = () => (\n  <Jumbotron\n    style={{ marginTop: \"1rem\", marginBottom: \"1rem\", padding: \"1rem 1rem\" }}\n  >\n    <h1>WebSeal</h1>\n    <p>Client-side sealed-secrets generation</p>\n  </Jumbotron>\n);\n\nconst CodeArea = (props) => (\n  <textarea\n    {...props}\n    style={{\n      fontSize: \"0.8rem\",\n      fontFamily: \"Courier\",\n      border: \"1px solid #ccc\",\n      width: \"100%\",\n      padding: 5,\n      height: 400,\n      ...(props.style || {}),\n    }}\n  ></textarea>\n);\n\nconst Copier = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n  return (\n    <CopyToClipboard\n      text={text}\n      onCopy={() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      }}\n    >\n      <Clipboard\n        style={{\n          marginLeft: 10,\n          cursor: \"pointer\",\n          transition: \"all 0.2s ease-in\",\n        }}\n        color={copied ? \"green\" : \"black\"}\n        title=\"Copy\"\n        size={16}\n      />\n    </CopyToClipboard>\n  );\n};\n\nconst Editor = () => {\n  const [formData, setFormData] = useState({\n    cluster: \"dev\",\n    namespace: \"\",\n    name: \"\",\n    pemKey: \"\",\n  });\n  const [encrypted, setEncrypted] = useState(null);\n  const [yamlResult, setYamlResult] = useState(null);\n  const onSubmit = async (data) => {\n    //console.log(\"onSubmit2\", data);\n    const validKey = isValidKey(data.pemKey);\n    setFormData(data);\n    setEncrypted(\"\");\n    setYamlResult(\"\");\n    if (!validKey) {\n      return;\n    }\n    if (data.value && data.value !== formData.value) {\n      const pemKey = data.pemKey;\n      const values = {};\n      if (data.value.match(/^([\\w_\\d]+)=(.+)$/im)) {\n        data.value.split(\"\\n\").forEach((row) => {\n          const matches = row.match(/^([\\w_\\d]+)=(.*)$/i);\n          if (matches) {\n            values[matches[1]] = matches[2];\n          }\n        });\n      } else {\n        values.VALUE = data.value;\n      }\n      let sealedSecret;\n      try {\n        sealedSecret = await getSealedSecret({\n          pemKey,\n          namespace: data.namespace || \"some-namespace\",\n          name: data.name || \"some-secret-name\",\n          scope: data.scope,\n          values,\n        });\n      } catch (e) {\n        console.log(\"cannot create sealed secret\", e.message);\n        return;\n      }\n      if (data.scope === \"strict\" && (!data.namespace || !data.name)) {\n        console.log(\"namespace and name are mandatory\");\n        setYamlResult(\"\");\n        setEncrypted(\"\");\n      } else if (data.scope === \"namespace\" && !data.namespace) {\n        console.log(\"namespace is mandatory\");\n        setYamlResult(\"\");\n        setEncrypted(\"\");\n      } else if (!data.value) {\n        console.log(\"value is mandatory\");\n        setYamlResult(\"\");\n        setEncrypted(\"\");\n      } else {\n        const keys = Object.keys(values);\n        if (keys.length === 1) {\n          setEncrypted(sealedSecret.spec.encryptedData[keys[0]]);\n        } else {\n          setEncrypted(\n            \"Not available for multiple values, use the below secret\"\n          );\n        }\n        setYamlResult(yaml.dump(sealedSecret, { noRefs: true, lineWidth: -1 }));\n      }\n    }\n  };\n  return (\n    <Container>\n      <Intro />\n      <Row>\n        <Col xs={12}>\n          <Form onSubmit={onSubmit} initialFormData={formData} />\n          {encrypted && (\n            <>\n              <Card style={{ marginTop: 10 }}>\n                <Card.Body>\n                  <Card.Title>\n                    SealedSecret <Copier text={yamlResult} />\n                  </Card.Title>\n                  <CodeArea defaultValue={yamlResult} />\n                </Card.Body>\n              </Card>\n              <Protip />\n              <br/>\n              <br/>\n            </>\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GitHubForkRibbon from \"react-github-fork-ribbon\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n    <GitHubForkRibbon\n      color=\"green\"\n      target=\"_blank\"\n      href=\"https://github.com/SocialGouv/webseal\"\n    >\n      Fork me on GitHub\n    </GitHubForkRibbon>\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}