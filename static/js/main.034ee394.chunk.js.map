{"version":3,"sources":["Form.js","makeYaml.js","App.js","index.js","makeSecret.js"],"names":["RadioChoice","React","forwardRef","ref","name","value","props","Check","inline","id","label","type","Form","onSubmit","useForm","mode","defaultValues","pemKey","namespace","scope","register","handleSubmit","getValues","formState","setValue","trigger","validKey","isDirty","isValidKey","data","Row","Col","Label","Group","Control","as","style","marginTop","fontSize","fontFamily","rows","onChange","e","target","required","placeholder","defaultValue","xs","sm","column","Button","disabled","isValid","block","variant","Intro","Jumbotron","padding","CodeArea","border","width","height","Copier","text","useState","copied","setCopied","onCopy","setTimeout","marginLeft","cursor","transition","color","title","size","Editor","encrypted","setEncrypted","yaml","setYaml","Container","Card","Body","console","log","makeSecret","then","newYaml","encryptedData","annotations","manifest","apiVersion","kind","metadata","spec","template","YAML","stringify","makeYaml","VALUE","catch","Title","App","className","rootElement","document","getElementById","ReactDOM","render","href","getLabel","a","cert","pki","certificateFromPem","publicKeyPem","publicKeyToPem","publicKey","pemPublicKeyToCryptoKey","Buffer","from","HybridEncrypt","result","toString","key"],"mappings":"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","file":"static/js/main.034ee394.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Row, Col, Form as BsForm, Button } from \"react-bootstrap\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nimport { isValidKey } from \"./makeSecret\";\n\nconst RadioChoice = React.forwardRef(({ name, value, ...props }, ref) => (\n  <BsForm.Check\n    inline\n    ref={ref}\n    name={name}\n    id={`${name}-${value}`}\n    label={value}\n    type=\"radio\"\n    value={value}\n    {...props}\n  />\n));\n\nconst certificatePlaceholder = `-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----`;\n\nconst certificateSample = ``;\n\nexport const Form = ({ onSubmit }) => {\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    setValue,\n    trigger,\n  } = useForm({\n    mode: \"all\",\n    defaultValues: {\n      pemKey: certificateSample,\n      value: \"\",\n      namespace: \"\",\n      name: \"\",\n      scope: \"cluster\",\n    },\n  });\n  const _onSubmit = (data) => {\n    //console.log(\"onSubmit\", data);\n    onSubmit(data);\n  };\n  const scope = getValues(\"scope\");\n  const pemKey = getValues(\"pemKey\");\n  const validKey = formState.isDirty\n    ? isValidKey(pemKey)\n    : isValidKey(certificateSample);\n  return (\n    <BsForm onSubmit={handleSubmit(_onSubmit)}>\n      <Row>\n        <Col>\n          <BsForm.Label>\n            Server public certificate (PEM key) :{\" \"}\n            {(!validKey && \"‚ùå Provided key is invalid\") || \"\"}\n          </BsForm.Label>\n          <BsForm.Group>\n            <BsForm.Control\n              as=\"textarea\"\n              name=\"pemKey\"\n              style={{\n                marginTop: 10,\n                fontSize: \"0.8rem\",\n                fontFamily: \"Courier\",\n              }}\n              rows={8}\n              onChange={(e) => {\n                setValue(\"pemKey\", e.target.value);\n                trigger();\n              }}\n              ref={register({ required: true })}\n              placeholder={certificatePlaceholder}\n              defaultValue={certificateSample}\n            />\n          </BsForm.Group>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={12} sm={3}>\n          <BsForm.Label>Scope :</BsForm.Label>\n        </Col>\n        <Col sm={9}>\n          <RadioChoice\n            name=\"scope\"\n            value=\"cluster\"\n            ref={register}\n            onChange={(e) => {\n              setValue(\"scope\", e.target.value);\n              trigger();\n            }}\n          />\n          <RadioChoice\n            name=\"scope\"\n            value=\"namespace\"\n            ref={register}\n            onChange={(e) => {\n              setValue(\"scope\", e.target.value);\n              trigger();\n            }}\n          />\n          <RadioChoice\n            name=\"scope\"\n            value=\"strict\"\n            ref={register}\n            onChange={(e) => {\n              setValue(\"scope\", e.target.value);\n              trigger();\n            }}\n          />\n        </Col>\n      </Row>\n      {(scope === \"namespace\" || scope === \"strict\") && (\n        <BsForm.Group as={Row}>\n          <BsForm.Label column>Namespace :</BsForm.Label>\n          <Col sm=\"9\">\n            <BsForm.Control\n              name=\"namespace\"\n              ref={register({ required: true })}\n              required\n              type=\"text\"\n              placeholder=\"Namespace\"\n            />\n          </Col>\n        </BsForm.Group>\n      )}\n      {scope === \"strict\" && (\n        <BsForm.Group as={Row}>\n          <BsForm.Label column>Secret name :</BsForm.Label>\n          <Col sm=\"9\">\n            <BsForm.Control\n              name=\"name\"\n              ref={register({ required: true })}\n              type=\"text\"\n              placeholder=\"Secret name\"\n            />\n          </Col>\n        </BsForm.Group>\n      )}\n      <BsForm.Group>\n        <BsForm.Control\n          as=\"textarea\"\n          name=\"value\"\n          onChange={(e) => {\n            setValue(\"value\", e.target.value);\n            trigger();\n          }}\n          style={{ marginTop: 10 }}\n          rows={4}\n          ref={register({ required: true })}\n          placeholder=\"Value to encrypt\"\n        />\n      </BsForm.Group>\n      <Button\n        disabled={!formState.isDirty || !formState.isValid}\n        block\n        variant=\"primary\"\n        type=\"submit\"\n      >\n        Encrypt\n      </Button>\n    </BsForm>\n  );\n};\n","import YAML from \"yaml\";\n\nexport const makeYaml = ({\n  namespace = \"some-namespace\",\n  name = \"some-secret-name\",\n  scope = \"strict\",\n  encryptedData,\n}) => {\n  const annotations = {};\n  if (scope === \"cluster\") {\n    annotations[\"sealedsecrets.bitnami.com/cluster-wide\"] = \"true\";\n  } else if (scope === \"namespace\") {\n    annotations[\"sealedsecrets.bitnami.com/namespace-wide\"] = \"true\";\n  }\n\n  const manifest = {\n    apiVersion: \"bitnami.com/v1alpha1\",\n    kind: \"SealedSecret\",\n    metadata: {\n      annotations,\n      name,\n      namespace,\n    },\n    spec: {\n      encryptedData,\n    },\n    template: {\n      metadata: {\n        annotations,\n        name,\n      },\n      type: \"Opaque\",\n    },\n  };\n\n  return YAML.stringify(manifest);\n};\n","import React, { useState } from \"react\";\nimport { Card, Jumbotron, Container, Row, Col } from \"react-bootstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { Clipboard } from \"react-feather\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { Form } from \"./Form\";\nimport { makeSecret } from \"./makeSecret\";\nimport { makeYaml } from \"./makeYaml\";\n\nconst Intro = () => (\n  <Jumbotron style={{ padding: \"2rem 1rem\" }}>\n    <h1>WebSeal</h1>\n    <p>Client-side sealed-secrets generation</p>\n  </Jumbotron>\n);\n\nconst CodeArea = (props) => (\n  <textarea\n    {...props}\n    style={{\n      fontSize: \"0.8rem\",\n      fontFamily: \"Courier\",\n      border: \"1px solid #ccc\",\n      width: \"100%\",\n      padding: 5,\n      height: 400,\n      ...(props.style || {}),\n    }}\n  ></textarea>\n);\n\nconst Copier = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n  return (\n    <CopyToClipboard\n      text={text}\n      onCopy={() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      }}\n    >\n      <Clipboard\n        style={{\n          marginLeft: 10,\n          cursor: \"pointer\",\n          transition: \"all 0.2s ease-in\",\n        }}\n        color={copied ? \"green\" : \"black\"}\n        title=\"Copy\"\n        size={16}\n      />\n    </CopyToClipboard>\n  );\n};\n\nconst Editor = () => {\n  const [encrypted, setEncrypted] = useState(null);\n  const [yaml, setYaml] = useState(null);\n  const onSubmit = (data) => {\n    console.log(\"onSubmit2\", data);\n    setEncrypted(\"\");\n    setYaml(\"\");\n    makeSecret(data)\n      .then((value) => {\n        setEncrypted(value);\n        const newYaml = makeYaml({\n          namespace: data.namespace,\n          name: data.name,\n          scope: data.scope,\n          encryptedData: {\n            VALUE: value,\n          },\n        });\n\n        setYaml(newYaml);\n      })\n      .catch(console.log);\n  };\n  return (\n    <Container>\n      <Intro />\n      <Row>\n        <Col xs={12}>\n          <Card>\n            <Card.Body>\n              <Form onSubmit={onSubmit} />\n            </Card.Body>\n          </Card>\n          {encrypted && (\n            <>\n              <Card style={{ marginTop: 10 }}>\n                <Card.Body>\n                  <Card.Title>\n                    Encrypted\n                    <Copier text={encrypted} />\n                  </Card.Title>\n                  <CodeArea defaultValue={encrypted} style={{ height: 200 }} />\n                </Card.Body>\n              </Card>\n              <Card style={{ marginTop: 10 }}>\n                <Card.Body>\n                  <Card.Title>\n                    SealedSecret <Copier text={yaml} />\n                  </Card.Title>\n                  <CodeArea defaultValue={yaml} />\n                </Card.Body>\n              </Card>\n            </>\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GitHubForkRibbon from \"react-github-fork-ribbon\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n    <GitHubForkRibbon\n      color=\"green\"\n      target=\"_blank\"\n      href=\"https://github.com/SocialGouv/webseal\"\n    >\n      Fork me on GitHub\n    </GitHubForkRibbon>\n  </StrictMode>,\n  rootElement\n);\n","import { pki } from \"node-forge\";\nimport {\n  HybridEncrypt,\n  pemPublicKeyToCryptoKey,\n} from \"@socialgouv/aes-gcm-rsa-oaep\";\n\n// https://github.com/bitnami-labs/sealed-secrets/blob/717b7c1cae24af1ead57992b78196ff6dc70025e/pkg/apis/sealed-secrets/v1alpha1/sealedsecret_expansion.go#L77\nconst getLabel = ({ scope, namespace, name }) => {\n  if (scope === \"cluster\") {\n    return \"\";\n  } else if (scope === \"namespace\") {\n    return namespace;\n  }\n  return `${namespace}/${name}`;\n};\n\nexport const makeSecret = async ({ pemKey, scope, namespace, name, value }) => {\n  const cert = pki.certificateFromPem(pemKey);\n  const publicKeyPem = pki.publicKeyToPem(cert.publicKey);\n  const publicKey = await pemPublicKeyToCryptoKey(publicKeyPem);\n  const label = Buffer.from(getLabel({ scope, namespace, name }));\n  const result = await HybridEncrypt(publicKey, value, label);\n  return Buffer.from(result).toString(\"base64\");\n};\n\nexport const isValidKey = (key) => {\n  let isValid = false;\n  try {\n    pki.certificateFromPem(key);\n    isValid = true;\n  } catch (e) {\n    console.log(\"e\", e);\n  }\n  return isValid;\n};\n"],"sourceRoot":""}